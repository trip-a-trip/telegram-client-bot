import { Injectable } from '@nestjs/common';
import { Venue, VenueKind } from '@trip-a-trip/lib';
import { take, last } from 'lodash';

import { TemplateEngine } from './TemplateEngine';
import { TemplateName } from './TemplateName';

const makeLink = (title: string, url: string) => `[${title}](${url})`;

@Injectable()
export class StringTemplateEngine implements TemplateEngine {
  async render(name: TemplateName, context?: any): Promise<string> {
    switch (name) {
      case TemplateName.Venue:
        return this.renderVenue(context);
      case TemplateName.NotFound:
        return this.renderNotFound();
      case TemplateName.NoMore:
        return this.renderNoMore();
      case TemplateName.Hello:
        return this.renderHello();
      case TemplateName.Help:
        return this.renderHelp();
      default:
        throw new Error('Template nor found');
    }
  }

  private renderVenue(venue: Venue) {
    const marks = [venue.isAmazing && 'üòç', venue.isExpensive && 'üí∏']
      .filter(Boolean)
      .join(' ');

    const kindMap = {
      [VenueKind.BiteDrink]: '–≤—ã–ø–∏—Ç—å —á–∞—é/–∫–æ—Ñ–µ',
      [VenueKind.Lunch]: '–ø–æ–æ–±–µ–¥–∞—Ç—å',
      [VenueKind.Breakfast]: '–ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å',
      [VenueKind.Dinner]: '–ø–æ—É–∂–∏–Ω–∞—Ç—å',
    };

    const kindVariants = venue.kind.map((kind) => kindMap[kind]);

    const kinds =
      kindVariants.length > 1
        ? `${take(kindVariants, kindVariants.length - 1).join(', ')} –∏ ${last(
            kindVariants,
          )}`
        : last(kindVariants);

    const links = venue.links
      .map((link) => makeLink(link.title, link.url))
      .join('\n');

    return [
      `${marks} *${venue.name}*`,
      venue.description,
      venue.kind.length > 0 && `–¢—É—Ç –º–æ–∂–Ω–æ _${kinds}_.`,
      venue.address &&
        makeLink(
          venue.address,
          `https://maps.google.com?q=${encodeURI(venue.address)}`,
        ),
      links,
    ]
      .filter(Boolean)
      .join('\n\n');
  }

  private renderNotFound() {
    return '–Ø –Ω–µ –∑–Ω–∞—é –≥–¥–µ –ø–æ–µ—Å—Ç—å –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏, —Å–æ—Ä—è–Ω üåö';
  }

  private renderNoMore() {
    return '–ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç ü¶Å';
  }

  private renderHello() {
    return [
      '–ü—Ä–∏–≤–µ—Ç. –Ø ‚Äî –ò–≥–æ—Ä—å –ö–∞–º—ã—à–µ–≤, –∏ —è –æ—á–µ–Ω—å –ª—é–±–ª—é –µ–¥—É.',
      '–í—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –≥–¥–µ —Ö–æ—Ä–æ—à–æ ‚Äî –≤ —ç—Ç–æ–º –±–æ—Ç–µ. –û–Ω —É–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –µ–¥—É —Ä—è–¥–æ–º, –ø–æ–¥–±–∏—Ä–∞—Ç—å –µ—ë –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.',
      [
        '–≠—Ç–æ –º–æ–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º. –£ –∑–∞–≤–µ–¥–µ–Ω–∏–π –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –ø–æ–º–µ—á–µ–Ω—ã —ç–º–æ–¥–∑–∏:',
        ' üòç ‚Äî —ç–º–µ–π–∑–∏–Ω–≥ –º–µ—Å—Ç–æ',
        ' üí∏ ‚Äî –¥–æ—Ä–æ–≥–æ–≤–∞—Ç–æ, –Ω–æ –±–µ–∑ –∂–µ—Å—Ç–∏',
      ].join('\n'),
      '–ü–∏—à–∏ —Ñ–∏–¥–±–µ–∫–∏ (@igorkamyshev), —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –¥—Ä—É–∑—å—è–º, –µ—à—å –≤–∫—É—Å–Ω–æ.',
      this.renderHelp(),
    ].join('\n\n');
  }

  private renderHelp() {
    return '–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç.';
  }
}
